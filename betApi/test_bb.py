# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from bs4 import BeautifulSoup


class TestBb():
    def __init__(self) -> None:
        self.setup_method(self)
        self.test_bb()

    def setup_method(self, method):
        """Start up the program"""
        self.driver = webdriver.Chrome(keep_alive=True)
        self.vars = {}

    def teardown_method(self, method):
        """Tear down the connection"""
        self.driver.quit()

    def wait_for_element_present(self, by, value, timeout=10):
        """Waiting for an element to load befor carrying on"""
        WebDriverWait(self.driver, timeout).until(
            EC.presence_of_element_located((by, value))
        )

    def save_html(self, filename='saved_page.html'):
        """Save the html  file for later parsing"""
        with open(filename, 'w', encoding='utf-8') as file:
            file.write(self.driver.page_source)

    def read_saved_html(self, filename='saved_page.html'):
        """Read saved html"""
        with open(filename, 'r', encoding='utf-8') as file:
            return file.read()

    def parse_data(self):
        # Example: Read the saved HTML and print it
        saved_html = self.read_saved_html()
        soup = BeautifulSoup(saved_html, 'lxml')
        percentage = (soup.find_all('tr', class_='tools_panel'))
        data = []
        for i in percentage:
            data.append(i.text)
        return data

    def write_to_json(self, data, filename):
        """save to a json file"""
        # Convert generator to a list of dictionaries
        with open(filename, 'w', encoding='utf-8') as json_file:
            json.dump(data, json_file, indent=2)
        # You can perform additional analysis on the saved HTML here

    def refresh_browser_every_minute(self, timing: int = 60):
        """Refresh every given time"""
        while True:
            # Put the code for the specific element you want to wait for here
            # For example, waiting for the element with ID "user_email"
            self.wait_for_element_present(By.CLASS_NAME, "percent")

            # Your other test steps go here
            # Save the HTML content after each refresh, overwriting the previous file
            self.save_html()

            # Extract the file
            # Call the write_to_json function with the generate_data generator function
            self.write_to_json(self.parse_data(), 'data.json')

            # Refresh the browser
            self.driver.refresh()

            # Wait for one minute before the next iteration
            time.sleep(timing)

    def test_bb(self):
        """Performing all the site checking functions"""
        # Test name: bb
        # Step # | name | target | value
        # 1 | open | /en/users/sign_in |
        self.driver.get("https://breaking-bet.com/en/users/sign_in")
        # 2 | setWindowSize | 1050x880 |
        self.driver.set_window_size(1050, 880)
        # 3 | click | id=user_email |
        self.driver.find_element(By.ID, "user_email").click()
        # 4 | type | id=user_email | chibuzoi410@gmail.com
        self.driver.find_element(By.ID, "user_email").send_keys(
            "chibuzoi410@gmail.com")
        # 5 | type | id=user_password | EML9i@9B5nCx4EX
        self.driver.find_element(
            By.ID, "user_password").send_keys("EML9i@9B5nCx4EX")
        # 6 | click | id=user_remember_me |
        self.driver.find_element(By.ID, "user_remember_me").click()
        # 7 | click | name=commit |
        self.driver.find_element(By.NAME, "commit").click()
        # 8 | refresh every 1min
        self.refresh_browser_every_minute()


TestBb()
